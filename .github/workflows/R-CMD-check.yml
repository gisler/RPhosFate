name: R-CMD-check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  R-CMD-check:
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: '4.1.2'}
          - {os: windows-latest, r: 'devel'}
          - {os: macOS-latest, r: 'oldrel'}
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'oldrel', rspm: 'https://packagemanager.rstudio.com/cran/__linux__/focal/latest'}
          - {os: ubuntu-20.04, r: 'release', rspm: 'https://packagemanager.rstudio.com/cran/__linux__/focal/latest'}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    runs-on: ${{ matrix.config.os }}

    env:
      R_KEEP_PKG_SOURCE: true
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@v1

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}

      - name: Query dependencies
        run: |
          install.packages("remotes")
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Restore R package cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo chmod -R 777 "/opt/R"
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install system dependencies (MacOS)
        if: runner.os == 'macOS'
        run: brew install libomp

      - name: Install dependencies (4.1.2)
        if: matrix.config.r == '4.1.2'
        run: |
          remotes::install_cran(
            c("checkmate", "hydroGOF", "raster", "Rcpp", "RcppArmadillo", "spatstat.geom", "yaml", "whitebox", "rcmdcheck"),
            repos = "https://mran.microsoft.com/snapshot/2021-12-25",
            type = "win.binary",
            dependencies = TRUE,
            lib = .libPaths()[2L]
          )
          remotes::install_deps(
            dependencies = TRUE,
            type = "win.binary",
            upgrade = "never",
            lib = .libPaths()[2L]
          )
          remotes::install_cran(
            "covr",
            type = "win.binary",
            lib = .libPaths()[2L]
          )
        shell: Rscript {0}

      - name: Install dependencies (all but 4.1.2)
        if: matrix.config.r != '4.1.2'
        run: |
          remotes::install_deps(dependencies = TRUE, lib = .libPaths()[2L])
          remotes::install_cran(
            c("rgdal", "rcmdcheck", "covr"),
            lib = .libPaths()[2L]
          )
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          Rcpp::compileAttributes()
          rcmdcheck::rcmdcheck(
            args = c("--no-manual", "--as-cran"),
            check_dir = "check",
            lib = .libPaths()[2L],
            error_on = "warning"
          )
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Test coverage
        if: success() && runner.os == 'Linux' && matrix.config.r == 'release'
        run: |
          Rcpp::compileAttributes()
          covr::codecov()
        shell: Rscript {0}
